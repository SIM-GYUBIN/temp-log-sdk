"use strict";var Cholog=(()=>{var v=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var E=Object.getOwnPropertyNames;var C=Object.prototype.hasOwnProperty;var S=(n,e)=>{for(var o in e)v(n,o,{get:e[o],enumerable:!0})},I=(n,e,o,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of E(e))!C.call(n,i)&&i!==o&&v(n,i,{get:()=>e[i],enumerable:!(t=b(e,i))||t.enumerable});return n};var T=n=>I(v({},"__esModule",{value:!0}),n);var P={};S(P,{Cholog:()=>w,default:()=>R});var d=class{static{this.currentTraceId=null}static startNewTrace(){return this.currentTraceId=this.generateId("trace"),this.currentTraceId}static getCurrentTraceId(){return this.currentTraceId}static setCurrentTraceId(e){this.currentTraceId=e}static generateId(){return typeof crypto<"u"&&crypto.randomUUID?crypto.randomUUID():`trace-${Date.now()}-${Math.random().toString(36).substring(2,11)}`}};var l=class{static{this.projectKey=""}static{this.environment=""}static{this.apiEndpoint="http://localhost:8080/logs"}static{this.originalConsole=null}static{this.logQueue=[]}static{this.batchInterval=1e3}static{this.batchTimeoutId=null}static{this.maxQueueSize=100*1024}static{this.currentQueueSize=0}static init(e){if(this.originalConsole!==null){console.warn("Cholog: Logger already initialized.");return}this.projectKey=e.projectKey,this.environment=e.environment,e.batchInterval&&(this.batchInterval=e.batchInterval),e.maxQueueSize&&(this.maxQueueSize=e.maxQueueSize),this.overrideConsoleMethods()}static getApiEndpoint(){return this.apiEndpoint}static overrideConsoleMethods(){this.originalConsole={log:console.log.bind(console),info:console.info.bind(console),warn:console.warn.bind(console),error:console.error.bind(console),debug:console.debug.bind(console),trace:console.trace.bind(console)},console.log=(...e)=>this.queueAndPrint("info","console",...e),console.info=(...e)=>this.queueAndPrint("info","console",...e),console.warn=(...e)=>this.queueAndPrint("warn","console",...e),console.error=(...e)=>this.queueAndPrint("error","console",...e),console.debug=(...e)=>this.queueAndPrint("debug","console",...e),console.trace=(...e)=>this.queueAndPrint("trace","console",...e)}static queueAndPrint(e,o,...t){if(this.originalConsole){let i=this.originalConsole[e];i?i(...t):this.originalConsole.log(...t)}this.prepareAndQueueLog(e,o,t)}static prepareAndQueueLog(e,o,t,i,a,g,r){if(!this.projectKey||!this.environment){this.originalConsole?this.originalConsole.warn("Cholog: SDK not initialized. Log not sent.",...t):console.warn("Cholog: SDK not initialized. Log not sent.",...t);return}let c="",s={},p={};t.length>0&&(typeof t[0]=="string"?(c=t[0],t.length>1&&typeof t[1]=="object"&&t[1]!==null?!i&&!a&&!r&&(s={...t[1]}):t.length>1&&(c+=" "+t.slice(1).map(h=>typeof h=="object"?JSON.stringify(h):String(h)).join(" "))):c=t.map(h=>typeof h=="object"?JSON.stringify(h):String(h)).join(" "));let f;i?f="error":a?f="network":r?f="event":f="general",i&&(p.error=i),a&&(p.http=a),g&&(p.client=g),r&&(p.event=r);let u={timestamp:new Date().toISOString(),level:e.toUpperCase(),message:c,source:"frontend",projectKey:this.projectKey,environment:this.environment,traceId:d.getCurrentTraceId(),loggerName:o,logType:f,...p};Object.keys(s).length>0&&(u.payload=s),typeof window<"u"&&typeof navigator<"u"&&typeof location<"u"&&(u.client||(u.client={}),u.client.url=u.client.url||window.location.href,u.client.userAgent=u.client.userAgent||navigator.userAgent,document.referrer&&!u.client.referrer&&(u.client.referrer=document.referrer));try{let h=new Blob([JSON.stringify(u)]).size;this.logQueue.push(u),this.currentQueueSize+=h,this.currentQueueSize>=this.maxQueueSize?this.sendBatch():this.scheduleBatch()}catch(h){this.originalConsole?.error?.("Cholog: Error calculating log size, falling back to count-based queue.",h),this.logQueue.push(u),this.logQueue.length>20?this.sendBatch():this.scheduleBatch()}}static scheduleBatch(){this.batchTimeoutId===null&&this.logQueue.length>0&&(this.batchTimeoutId=window.setTimeout(async()=>{this.batchTimeoutId=null,await this.sendBatch(),this.logQueue.length>0&&this.scheduleBatch()},this.batchInterval))}static async sendBatch(){if(this.logQueue.length===0)return;this.batchTimeoutId!==null&&(clearTimeout(this.batchTimeoutId),this.batchTimeoutId=null);let e=[...this.logQueue];this.logQueue=[],this.currentQueueSize=0;try{let o=await fetch(this.apiEndpoint,{method:"POST",headers:{"Content-Type":"application/json","App-Key":this.projectKey},body:JSON.stringify(e)});if(!o.ok){let t=await o.text();throw new Error(`Log send failed: ${o.status} - ${t}`)}}catch(o){this.originalConsole?this.originalConsole.error("Cholog: Logger sendBatch error:",o):console.error("Cholog: Logger sendBatch error (original console unavailable):",o)}}static log(e,o){this.prepareAndQueueLog("info","cholog",[e,o||{}])}static info(e,o){this.prepareAndQueueLog("info","cholog",[e,o||{}])}static warn(e,o){this.prepareAndQueueLog("warn","cholog",[e,o||{}])}static error(e,o){this.prepareAndQueueLog("error","cholog",[e,o||{}])}static debug(e,o){this.prepareAndQueueLog("debug","cholog",[e,o||{}])}static trace(e,o){this.prepareAndQueueLog("trace","cholog",[e,o||{}])}static logError(e,o,t){this.prepareAndQueueLog("error","cholog",[e],o,void 0,t)}static logHttp(e,o,t,i){let a=i||o.response&&o.response.statusCode>=400?"error":"info";this.prepareAndQueueLog(a,"cholog",[e],i,o,t)}static logEvent(e,o,t){this.prepareAndQueueLog("info","cholog",[e],void 0,void 0,t,o)}};var m=class n{static{this.isInitialized=!1}static{this.originalFetch=null}static{this.originalXhrOpen=null}static{this.originalXhrSend=null}static patchFetch(){typeof window>"u"||!window.fetch||(this.originalFetch=window.fetch,window.fetch=async(e,o)=>{let t=typeof e=="string"?e:e instanceof URL?e.href:e.url;if(t.startsWith(l.getApiEndpoint()))return n.originalFetch.call(window,e,o);let i=d.getCurrentTraceId()||d.startNewTrace(),a={...o||{}};a.headers=new Headers(a.headers),a.headers.has("X-Request-ID")||a.headers.set("X-Request-ID",i);let g=Date.now(),r={method:(a.method||(typeof e!="string"&&!(e instanceof URL)?e.method:"GET")||"GET").toUpperCase(),url:t};try{let c=await n.originalFetch.call(window,e,a),s=Date.now()-g,p={statusCode:c.status};return l.logHttp(`API Call: ${r.method} ${r.url} - Status ${c.status}`,{request:r,response:p,durationMs:s},void 0),c}catch(c){let s=Date.now()-g,p={type:c?.name||"FetchError",message:c?.message||"Network request failed",stacktrace:c?.stack};throw l.logHttp(`API Call FAILED: ${r.method} ${r.url}`,{request:r,durationMs:s},void 0,p),c}})}static patchXMLHttpRequest(){if(typeof window>"u"||!window.XMLHttpRequest)return;this.originalXhrOpen=XMLHttpRequest.prototype.open,this.originalXhrSend=XMLHttpRequest.prototype.send;let e=this;XMLHttpRequest.prototype.open=function(o,t){this._chologMethod=o,this._chologUrl=typeof t=="string"?t:t.toString(),this._chologUrl.startsWith(l.getApiEndpoint())&&(this._chologSkip=!0),e.originalXhrOpen.apply(this,arguments)},XMLHttpRequest.prototype.send=function(o){if(this._chologSkip)return e.originalXhrSend.apply(this,arguments);let t=this;t._chologStartTime=Date.now();let i=d.getCurrentTraceId()||d.startNewTrace();this.setRequestHeader("X-Request-ID",i);let a={method:(t._chologMethod||"UnknownMethod").toUpperCase(),url:t._chologUrl||"UnknownURL"},g=()=>{if(t._chologLogged)return;t._chologLogged=!0;let r=t._chologStartTime?Date.now()-t._chologStartTime:void 0,c={statusCode:t.status},s;(t.status===0||t.status>=400)&&(s={type:t.statusText||"XHRError",message:`XHR request to ${a.url} failed with status ${t.status||"N/A"}. ReadyState: ${t.readyState}`}),l.logHttp(`XHR Call: ${a.method} ${a.url} - Status ${t.status}`,{request:a,response:c,durationMs:r},void 0,s),t.removeEventListener("loadend",g)};t.addEventListener("loadend",g),e.originalXhrSend.apply(this,arguments)}}static init(){if(!this.isInitialized)try{this.patchFetch(),this.patchXMLHttpRequest(),this.isInitialized=!0}catch(e){console.error("Cholog SDK: Failed to initialize NetworkInterceptor.",e)}}};var L=class{static{this.isInitialized=!1}static{this.handleGlobalError=(e,o,t,i,a)=>{let g="Unhandled global error",r={type:"UnknownError",message:""},c={},s=a;if(e instanceof ErrorEvent&&e.error?(s=e.error,g=e.message||s?.message||"Error message not available",r.type=s?.name||"ErrorEvent",r.message=s?.message||g,s?.stack&&(r.stacktrace=s.stack)):typeof e=="string"?(g=e,r.message=e,s?(r.type=s.name,s.stack&&(r.stacktrace=s.stack)):(r.type="GenericError",o&&(r.message+=` in ${o}`))):s&&(g=s.message,r.type=s.name,r.message=s.message,s.stack&&(r.stacktrace=s.stack)),r.stacktrace?.includes("cholog")||g?.includes("Cholog SDK")){console.warn("Cholog SDK: Suppressed potential recursive error log.",g);return}typeof window<"u"&&(c.url=window.location.href),l.logError(g,r,c)}}static{this.handleUnhandledRejection=e=>{let o=e.reason,t="Unhandled promise rejection",i={type:"UnhandledRejection",message:""},a={};if(o instanceof Error)t=o.message||"Promise rejected with an Error",i.type=o.name||"UnhandledRejectionError",i.message=o.message,o.stack&&(i.stacktrace=o.stack);else{try{i.message=`Reason: ${JSON.stringify(o)}`}catch{i.message="Reason: [Non-serializable]"}t=`Unhandled promise rejection: ${i.message}`}if(i.stacktrace?.includes("cholog")||t?.includes("Cholog SDK")){console.warn("Cholog SDK: Suppressed potential recursive error log.",t);return}typeof window<"u"&&(a.url=window.location.href),l.logError(t,i,a)}}static init(){if(!(this.isInitialized||typeof window>"u"))try{window.onerror=this.handleGlobalError,window.addEventListener("unhandledrejection",this.handleUnhandledRejection),this.isInitialized=!0}catch(e){console.error("Cholog SDK: Failed to initialize ErrorCatcher.",e)}}};var y=class{static{this.config={significantElementSelector:'button, a, [role="button"], input[type="submit"], [data-cholog-action]'}}static init(e){typeof window>"u"||(e?.significantElementSelector&&(this.config.significantElementSelector=e.significantElementSelector),this.logNavigation(window.location.href,"initial_load"),window.addEventListener("hashchange",()=>this.logNavigation(window.location.href,"hash_change")),window.addEventListener("popstate",()=>this.logNavigation(window.location.href,"popstate_navigation")),document.addEventListener("click",o=>{let i=o.target.closest(this.config.significantElementSelector);if(i){d.startNewTrace();let a={type:"user_interaction_click",targetSelector:this.getElementPath(i),properties:{elementType:i.tagName.toLowerCase(),elementId:i.id||void 0,elementClasses:i.className||void 0}};l.logEvent(`User clicked on ${a.targetSelector}`,a)}},!0))}static logNavigation(e,o){d.startNewTrace();let t={type:o,properties:{currentUrl:e}};l.logEvent(`Navigation event: ${o} to ${e}`,t)}static getElementPath(e){let o=[],t=e;for(;t&&t.tagName;){let i=t.tagName.toLowerCase();if(t.id){i+=`#${t.id}`,o.unshift(i);break}else t.classList&&t.classList.length>0&&(i+=`.${Array.from(t.classList).join(".")}`);if(o.unshift(i),t===document.body||o.length>=7)break;t=t.parentElement}return o.join(" > ")}};var w={init:n=>{d.startNewTrace(),l.init({projectKey:n.projectKey,environment:n.environment}),m.init(),L.init(),y.init(),l.info("Cholog SDK Initialized",{sdk:"cholog-js",version:"0.1.0-dev"})},log:(n,e)=>l.log(n,e),info:(n,e)=>l.info(n,e),warn:(n,e)=>l.warn(n,e),error:(n,e)=>{l.error(n,e)},debug:(n,e)=>l.debug(n,e),trace:(n,e)=>l.trace(n,e)},R=w;return T(P);})();
