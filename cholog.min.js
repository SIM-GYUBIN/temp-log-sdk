"use strict";var ChologSDK=(()=>{var u=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var b=Object.prototype.hasOwnProperty;var v=(i,e)=>{for(var t in e)u(i,t,{get:e[t],enumerable:!0})},m=(i,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of g(e))!b.call(i,o)&&o!==t&&u(i,o,{get:()=>e[o],enumerable:!(n=d(e,o))||n.enumerable});return i};var f=i=>m(u({},"__esModule",{value:!0}),i);var C={};v(C,{ChologSDK:()=>h,default:()=>y});var r=class{static{this.appKey=""}static{this.apiEndpoint="http://localhost:8080/logs"}static{this.originalConsole=null}static{this.logQueue=[]}static{this.batchInterval=1e3}static{this.batchTimeoutId=null}static{this.maxQueueSize=100*1024}static{this.currentQueueSize=0}static init(e){if(this.originalConsole!==null){console.warn("Logger already initialized.");return}this.appKey=e.appKey,e.apiEndpoint&&(this.apiEndpoint=e.apiEndpoint),e.batchInterval&&(this.batchInterval=e.batchInterval),e.maxQueueSize&&(this.maxQueueSize=e.maxQueueSize),this.overrideConsoleMethods()}static overrideConsoleMethods(){this.originalConsole={log:console.log.bind(console),info:console.info.bind(console),warn:console.warn.bind(console),error:console.error.bind(console),debug:console.debug.bind(console),trace:console.trace.bind(console)},console.log=(...e)=>this.queueAndPrint("info",e),console.info=(...e)=>this.queueAndPrint("info",e),console.warn=(...e)=>this.queueAndPrint("warn",e),console.error=(...e)=>this.queueAndPrint("error",e),console.debug=(...e)=>this.queueAndPrint("debug",e),console.trace=(...e)=>this.queueAndPrint("trace",e)}static queueAndPrint(e,t){this.originalConsole&&this.originalConsole[e](...t),this.queueLog(e,t)}static queueLog(e,t){let n=t.map(c=>typeof c=="object"?JSON.stringify(c):String(c)).join(" "),o={level:e,message:n,timestamp:new Date().toISOString()},p=new Blob([JSON.stringify(o)]).size;this.logQueue.push(o),this.currentQueueSize+=p,this.currentQueueSize>this.maxQueueSize?this.sendBatch():this.scheduleBatch()}static scheduleBatch(){this.batchTimeoutId===null&&(this.batchTimeoutId=window.setTimeout(async()=>{await this.sendBatch(),this.batchTimeoutId=null,this.logQueue.length>0&&this.scheduleBatch()},this.batchInterval))}static async sendBatch(){if(this.logQueue.length===0)return;let e=[...this.logQueue];this.logQueue=[],this.currentQueueSize=0;try{let t=await fetch(this.apiEndpoint,{method:"POST",headers:{"Content-Type":"application/json","App-Key":this.appKey},body:JSON.stringify(e)});if(!t.ok)throw new Error(`Log send failed: ${t.status}`)}catch(t){this.originalConsole?this.originalConsole.error("Logger sendBatch error:",t):console.error("Logger sendBatch error (original console unavailable):",t)}}};var s=class{static init(e){console.log("Network Interceptor initialized")}};var a=class{static init(){console.log("Error Catcher initialized")}};var l=class{static init(){console.log("Event Tracker initialized")}};var h={init:i=>{r.init(i),s.init(i),a.init(),l.init()}},y=h;return f(C);})();
