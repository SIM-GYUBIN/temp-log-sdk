"use strict";var Cholog=(()=>{var d=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var b=Object.prototype.hasOwnProperty;var y=(o,e)=>{for(var t in e)d(o,t,{get:e[t],enumerable:!0})},w=(o,e,t,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of f(e))!b.call(o,n)&&n!==t&&d(o,n,{get:()=>e[n],enumerable:!(s=g(e,n))||s.enumerable});return o};var v=o=>w(d({},"__esModule",{value:!0}),o);var S={};y(S,{Cholog:()=>p,default:()=>m});var i=class{static{this.appKey=""}static{this.apiEndpoint="http://localhost:8080/logs"}static{this.originalConsole=null}static{this.logQueue=[]}static{this.batchInterval=1e3}static{this.batchTimeoutId=null}static{this.maxQueueSize=100*1024}static{this.currentQueueSize=0}static init(e){if(this.originalConsole!==null){console.warn("Logger already initialized.");return}this.appKey=e.appKey,e.batchInterval&&(this.batchInterval=e.batchInterval),e.maxQueueSize&&(this.maxQueueSize=e.maxQueueSize),this.overrideConsoleMethods()}static overrideConsoleMethods(){this.originalConsole={log:console.log.bind(console),info:console.info.bind(console),warn:console.warn.bind(console),error:console.error.bind(console),debug:console.debug.bind(console),trace:console.trace.bind(console)},console.log=(...e)=>this.queueAndPrint("info",e),console.info=(...e)=>this.queueAndPrint("info",e),console.warn=(...e)=>this.queueAndPrint("warn",e),console.error=(...e)=>this.queueAndPrint("error",e),console.debug=(...e)=>this.queueAndPrint("debug",e),console.trace=(...e)=>this.queueAndPrint("trace",e)}static queueAndPrint(e,t){this.originalConsole&&this.originalConsole[e](...t),this.queueLog(e,t)}static queueLog(e,t){let s=t.map(r=>typeof r=="object"?JSON.stringify(r):String(r)).join(" "),n={level:e,message:s,timestamp:new Date().toISOString()},l=new Blob([JSON.stringify(n)]).size;this.logQueue.push(n),this.currentQueueSize+=l,this.currentQueueSize>this.maxQueueSize?this.sendBatch():this.scheduleBatch()}static scheduleBatch(){this.batchTimeoutId===null&&(this.batchTimeoutId=window.setTimeout(async()=>{await this.sendBatch(),this.batchTimeoutId=null,this.logQueue.length>0&&this.scheduleBatch()},this.batchInterval))}static async sendBatch(){if(this.logQueue.length===0)return;let e=[...this.logQueue];this.logQueue=[],this.currentQueueSize=0;try{let t=await fetch(this.apiEndpoint,{method:"POST",headers:{"Content-Type":"application/json","App-Key":this.appKey},body:JSON.stringify(e)});if(!t.ok)throw new Error(`Log send failed: ${t.status}`)}catch(t){this.originalConsole?this.originalConsole.error("Logger sendBatch error:",t):console.error("Logger sendBatch error (original console unavailable):",t)}}static info(...e){if(!this.appKey){console.warn("Cholog SDK is not initialized. Call ChologSDK.init first.");return}this.queueLog("info",e)}static warn(...e){if(!this.appKey){console.warn("Cholog SDK is not initialized. Call ChologSDK.init first.");return}this.queueLog("warn",e)}static error(...e){if(!this.appKey){console.warn("Cholog SDK is not initialized. Call ChologSDK.init first.");return}this.queueLog("error",e)}static debug(...e){if(!this.appKey){console.warn("Cholog SDK is not initialized. Call ChologSDK.init first.");return}this.queueLog("debug",e)}static trace(...e){if(!this.appKey){console.warn("Cholog SDK is not initialized. Call ChologSDK.init first.");return}this.queueLog("trace",e)}};var c=class{static{this.isInitialized=!1}static{this.originalFetch=null}static{this.originalXhrSend=null}static generateRequestId(){return crypto&&crypto.randomUUID?crypto.randomUUID():(console.warn("crypto.randomUUID is not available. Using basic fallback for Request ID."),`fallback-${Date.now()}-${Math.random().toString(36).substring(2,15)}`)}static patchFetch(){this.originalFetch=window.fetch;let e=this;window.fetch=async(t,s)=>{let n=e.generateRequestId(),l={...s||{}},r=l.headers,a;return r instanceof Headers?a=new Headers(r):Array.isArray(r)?a=new Headers(r):typeof r=="object"&&r!==null?a=new Headers(r):a=new Headers,a.set("X-Request-ID",n),l.headers=a,e.originalFetch?e.originalFetch(t,l):(console.error("Original fetch function not found!"),Promise.reject(new Error("Original fetch not available")))}}static patchXMLHttpRequest(){this.originalXhrSend=XMLHttpRequest.prototype.send;let e=this;XMLHttpRequest.prototype.send=function(t){let s=e.generateRequestId();try{this.setRequestHeader("X-Request-ID",s)}catch(n){console.error("Cholog SDK: Failed to set X-Request-ID header. Was XHR opened first?",n)}if(!e.originalXhrSend){console.error("Original XHR send function not found!");return}return e.originalXhrSend.apply(this,arguments)}}static init(){if(this.isInitialized){console.warn("NetworkInterceptor is already initialized.");return}if(typeof window>"u"||typeof XMLHttpRequest>"u"){console.warn("NetworkInterceptor: Not running in a browser environment? Skipping patch.");return}try{this.patchFetch(),this.patchXMLHttpRequest(),this.isInitialized=!0,console.log("Cholog NetworkInterceptor initialized successfully.")}catch(e){console.error("Cholog SDK: Failed to initialize NetworkInterceptor.",e)}}static restore(){this.isInitialized&&(this.originalFetch&&(window.fetch=this.originalFetch),this.originalXhrSend&&(XMLHttpRequest.prototype.send=this.originalXhrSend),this.originalFetch=null,this.originalXhrSend=null,this.isInitialized=!1,console.log("Cholog NetworkInterceptor restored original functions."))}};var u=class{static init(){console.log("Error Catcher initialized")}};var h=class{static init(){console.log("Event Tracker initialized")}};var p={init:o=>{i.init(o),c.init(),u.init(),h.init()},log:i.info.bind(i),info:i.info.bind(i),warn:i.warn.bind(i),error:i.error.bind(i),debug:i.debug.bind(i),trace:i.trace.bind(i)},m=p;return v(S);})();
