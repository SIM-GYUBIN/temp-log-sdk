"use strict";var Cholog=(()=>{var f=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var C=Object.getOwnPropertyNames;var S=Object.prototype.hasOwnProperty;var I=(s,e)=>{for(var t in e)f(s,t,{get:e[t],enumerable:!0})},L=(s,e,t,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of C(e))!S.call(s,r)&&r!==t&&f(s,r,{get:()=>e[r],enumerable:!(o=v(e,r))||o.enumerable});return s};var q=s=>L(f({},"__esModule",{value:!0}),s);var E={};I(E,{Cholog:()=>b,default:()=>z});var n=class{static{this.appKey=""}static{this.apiEndpoint="http://localhost:8080/logs"}static{this.originalConsole=null}static{this.logQueue=[]}static{this.batchInterval=1e3}static{this.batchTimeoutId=null}static{this.maxQueueSize=100*1024}static{this.currentQueueSize=0}static init(e){if(this.originalConsole!==null){console.warn("Logger already initialized.");return}this.appKey=e.appKey,e.batchInterval&&(this.batchInterval=e.batchInterval),e.maxQueueSize&&(this.maxQueueSize=e.maxQueueSize),this.overrideConsoleMethods()}static overrideConsoleMethods(){this.originalConsole={log:console.log.bind(console),info:console.info.bind(console),warn:console.warn.bind(console),error:console.error.bind(console),debug:console.debug.bind(console),trace:console.trace.bind(console)},console.log=(...e)=>this.queueAndPrint("info",e),console.info=(...e)=>this.queueAndPrint("info",e),console.warn=(...e)=>this.queueAndPrint("warn",e),console.error=(...e)=>this.queueAndPrint("error",e),console.debug=(...e)=>this.queueAndPrint("debug",e),console.trace=(...e)=>this.queueAndPrint("trace",e)}static queueAndPrint(e,t){this.originalConsole&&this.originalConsole[e](...t),this.queueLog(e,t)}static queueLog(e,t){let o=t.map(i=>typeof i=="object"?JSON.stringify(i):String(i)).join(" "),r={level:e,message:o,timestamp:new Date().toISOString()},a=new Blob([JSON.stringify(r)]).size;this.logQueue.push(r),this.currentQueueSize+=a,this.currentQueueSize>this.maxQueueSize?this.sendBatch():this.scheduleBatch()}static scheduleBatch(){this.batchTimeoutId===null&&(this.batchTimeoutId=window.setTimeout(async()=>{await this.sendBatch(),this.batchTimeoutId=null,this.logQueue.length>0&&this.scheduleBatch()},this.batchInterval))}static async sendBatch(){if(this.logQueue.length===0)return;let e=[...this.logQueue];this.logQueue=[],this.currentQueueSize=0;try{let t=await fetch(this.apiEndpoint,{method:"POST",headers:{"Content-Type":"application/json","App-Key":this.appKey},body:JSON.stringify(e)});if(!t.ok)throw new Error(`Log send failed: ${t.status}`)}catch(t){this.originalConsole?this.originalConsole.error("Logger sendBatch error:",t):console.error("Logger sendBatch error (original console unavailable):",t)}}static info(...e){if(!this.appKey){console.warn("Cholog SDK is not initialized. Call ChologSDK.init first.");return}this.queueLog("info",e)}static warn(...e){if(!this.appKey){console.warn("Cholog SDK is not initialized. Call ChologSDK.init first.");return}this.queueLog("warn",e)}static error(...e){if(!this.appKey){console.warn("Cholog SDK is not initialized. Call ChologSDK.init first.");return}this.queueLog("error",e)}static debug(...e){if(!this.appKey){console.warn("Cholog SDK is not initialized. Call ChologSDK.init first.");return}this.queueLog("debug",e)}static trace(...e){if(!this.appKey){console.warn("Cholog SDK is not initialized. Call ChologSDK.init first.");return}this.queueLog("trace",e)}};var h=class{static{this.isInitialized=!1}static{this.originalFetch=null}static{this.originalXhrSend=null}static generateRequestId(){return crypto&&crypto.randomUUID?crypto.randomUUID():(console.warn("crypto.randomUUID is not available. Using basic fallback for Request ID."),`fallback-${Date.now()}-${Math.random().toString(36).substring(2,15)}`)}static patchFetch(){this.originalFetch=window.fetch;let e=this;window.fetch=async(t,o)=>{let r=e.generateRequestId(),a={...o||{}},i=a.headers,c;return i instanceof Headers?c=new Headers(i):Array.isArray(i)?c=new Headers(i):typeof i=="object"&&i!==null?c=new Headers(i):c=new Headers,c.set("X-Request-ID",r),a.headers=c,e.originalFetch?e.originalFetch.call(window,t,a):(console.error("Original fetch function not found!"),Promise.reject(new Error("Original fetch not available")))}}static patchXMLHttpRequest(){this.originalXhrSend=XMLHttpRequest.prototype.send;let e=this;XMLHttpRequest.prototype.send=function(t){let o=e.generateRequestId();try{this.setRequestHeader("X-Request-ID",o)}catch(r){console.error("Cholog SDK: Failed to set X-Request-ID header. Was XHR opened first?",r)}if(!e.originalXhrSend){console.error("Original XHR send function not found!");return}return e.originalXhrSend.apply(this,arguments)}}static init(){if(this.isInitialized){console.warn("NetworkInterceptor is already initialized.");return}if(typeof window>"u"||typeof XMLHttpRequest>"u"){console.warn("NetworkInterceptor: Not running in a browser environment? Skipping patch.");return}try{this.patchFetch(),this.patchXMLHttpRequest(),this.isInitialized=!0,console.log("Cholog NetworkInterceptor initialized successfully.")}catch(e){console.error("Cholog SDK: Failed to initialize NetworkInterceptor.",e)}}};var g=class{static{this.isInitialized=!1}static{this.handleGlobalError=(e,t,o,r,a)=>{let i,c=t,w=o,y=r,d,u,l=a;if(e instanceof ErrorEvent&&e.error?(l=e.error,i=e.message||l?.message||"Error message not available",c=e.filename,w=e.lineno,y=e.colno,u=l?.name,d=l?.stack):typeof e=="string"?(i=e,l&&(u=l.name,d=l.stack)):l?(i=l.message,u=l.name,d=l.stack):(i="A non-error event was captured by the error handler.",u="UnknownError"),d?.includes("cholog")||i?.includes("Cholog SDK")){console.warn("Cholog SDK: Suppressed potential recursive error log.",i);return}let m={errorType:u||"Error",stack:d,sourceFile:c,lineno:w,colno:y,userAgent:navigator.userAgent,pageUrl:window.location.href};n.error(i||"Uncaught JavaScript Error",m)}}static{this.handleUnhandledRejection=e=>{let t=e.reason,o,r,a;if(t instanceof Error)o=t.message,r=t.stack,a=t.name;else{try{o=`Unhandled promise rejection: ${JSON.stringify(t)}`}catch{o="Unhandled promise rejection: [Non-serializable reason]"}a=typeof t}if(r?.includes("cholog")||o?.includes("Cholog SDK")){console.warn("Cholog SDK: Suppressed potential recursive error log.",o);return}let i={errorType:a||"UnhandledRejection",stack:r,sourceFile:r?void 0:window.location.href,userAgent:navigator.userAgent,pageUrl:window.location.href,reason:t instanceof Error?void 0:String(t)};n.error(o||"Unhandled Promise Rejection",i)}}static init(){if(!(this.isInitialized||typeof window>"u"))try{window.onerror=this.handleGlobalError,window.addEventListener("unhandledrejection",this.handleUnhandledRejection),this.isInitialized=!0,console.log("Cholog ErrorCatcher initialized successfully.")}catch(e){console.error("Cholog SDK: Failed to initialize ErrorCatcher.",e)}}static restore(){!this.isInitialized||typeof window>"u"||(window.onerror=null,window.removeEventListener("unhandledrejection",this.handleUnhandledRejection),this.isInitialized=!1,console.log("Cholog ErrorCatcher restored original handlers."))}};var p=class{static init(){console.log("Event Tracker initialized")}};var b={init:s=>{n.init(s),h.init(),g.init(),p.init()},log:n.info.bind(n),info:n.info.bind(n),warn:n.warn.bind(n),error:n.error.bind(n),debug:n.debug.bind(n),trace:n.trace.bind(n)},z=b;return q(E);})();
