"use strict";var ChologSDK=(()=>{var u=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var b=Object.prototype.hasOwnProperty;var v=(t,i)=>{for(var e in i)u(t,e,{get:i[e],enumerable:!0})},f=(t,i,e,n)=>{if(i&&typeof i=="object"||typeof i=="function")for(let o of d(i))!b.call(t,o)&&o!==e&&u(t,o,{get:()=>i[o],enumerable:!(n=g(i,o))||n.enumerable});return t};var y=t=>f(u({},"__esModule",{value:!0}),t);var m={};v(m,{ChologSDK:()=>h,default:()=>C});var r=class{static{this.appKey=""}static{this.apiEndpoint="https://www.cholog-server.shop/log"}static{this.originalConsole=null}static{this.logQueue=[]}static{this.batchInterval=1e3}static{this.batchTimeoutId=null}static{this.maxQueueSize=100*1024}static{this.currentQueueSize=0}static init(i){if(this.originalConsole!==null){console.warn("Logger already initialized.");return}this.appKey=i.appKey,i.apiEndpoint&&(this.apiEndpoint=i.apiEndpoint),i.batchInterval&&(this.batchInterval=i.batchInterval),i.maxQueueSize&&(this.maxQueueSize=i.maxQueueSize),this.overrideConsoleMethods()}static overrideConsoleMethods(){this.originalConsole={log:console.log.bind(console),info:console.info.bind(console),warn:console.warn.bind(console),error:console.error.bind(console),debug:console.debug.bind(console),trace:console.trace.bind(console)},console.log=(...i)=>this.queueAndPrint("info",i),console.info=(...i)=>this.queueAndPrint("info",i),console.warn=(...i)=>this.queueAndPrint("warn",i),console.error=(...i)=>this.queueAndPrint("error",i),console.debug=(...i)=>this.queueAndPrint("debug",i),console.trace=(...i)=>this.queueAndPrint("trace",i)}static queueAndPrint(i,e){this.originalConsole&&this.originalConsole[i](...e),this.queueLog(i,e)}static queueLog(i,e){let n=e.map(c=>typeof c=="object"?JSON.stringify(c):String(c)).join(" "),o={level:i,message:n,timestamp:new Date().toISOString()},p=new Blob([JSON.stringify(o)]).size;this.logQueue.push(o),this.currentQueueSize+=p,this.currentQueueSize>this.maxQueueSize?this.sendBatch():this.scheduleBatch()}static scheduleBatch(){this.batchTimeoutId===null&&(this.batchTimeoutId=window.setTimeout(async()=>{await this.sendBatch(),this.batchTimeoutId=null,this.logQueue.length>0&&this.scheduleBatch()},this.batchInterval))}static async sendBatch(){if(this.logQueue.length===0)return;let i=[...this.logQueue];this.logQueue=[],this.currentQueueSize=0;try{let e=await fetch(this.apiEndpoint,{method:"POST",headers:{"Content-Type":"application/json","App-Key":this.appKey},body:JSON.stringify(i)});if(!e.ok)throw new Error(`Log send failed: ${e.status}`)}catch(e){this.originalConsole?this.originalConsole.error("Logger sendBatch error:",e):console.error("Logger sendBatch error (original console unavailable):",e)}}static info(...i){if(!this.appKey){console.warn("Cholog SDK is not initialized. Call ChologSDK.init first.");return}this.queueLog("info",i)}static warn(...i){if(!this.appKey){console.warn("Cholog SDK is not initialized. Call ChologSDK.init first.");return}this.queueLog("warn",i)}static error(...i){if(!this.appKey){console.warn("Cholog SDK is not initialized. Call ChologSDK.init first.");return}this.queueLog("error",i)}static debug(...i){if(!this.appKey){console.warn("Cholog SDK is not initialized. Call ChologSDK.init first.");return}this.queueLog("debug",i)}static trace(...i){if(!this.appKey){console.warn("Cholog SDK is not initialized. Call ChologSDK.init first.");return}this.queueLog("trace",i)}};var s=class{static init(i){console.log("Network Interceptor initialized")}};var a=class{static init(){console.log("Error Catcher initialized")}};var l=class{static init(){console.log("Event Tracker initialized")}};var h={init:t=>{r.init(t),s.init(t),a.init(),l.init()}},C=h;return y(m);})();
